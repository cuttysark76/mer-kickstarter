#!/usr/bin/python
# Anas Nashif <anas.nashif@intel.com>
import yaml,  sys
import re, os
from kickstart import kickstart

import copy
import time
import optparse
from time import gmtime, strftime
import errno
try:
  from lxml import etree
except ImportError:
  try:
    # Python 2.5
    import xml.etree.cElementTree as etree
  except ImportError:
    try:
      # Python 2.5
      import xml.etree.ElementTree as etree
    except ImportError:
      try:
        # normal cElementTree install
        import cElementTree as etree
      except ImportError:
        try:
          # normal ElementTree install
          import elementtree.ElementTree as etree
        except ImportError:
          print("Failed to import ElementTree from any known place")

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST:
            pass
        else: raise


class KSWriter():
    def __init__(self, out):
        self.outdir = out
        self.extra = {}
        pass
    def merge(*input):
        return list(reduce(set.union, input, set()))

    def parse(self, image_meta, img):
        conf = {}
        conf["RemovePackages"] = []
        conf["ExtraPackages"] = []
        # No longer "Default"
        # Updating conf with values from Inherited sections.
        
        def merge_dictionaries(first, second):
            out = copy.copy(first)
            for k,v in second.iteritems():
                if out.has_key(k):
                 if isinstance(out[k], list) and isinstance(v, list):
                   temp = copy.copy(v)
                   temp.extend(out[k])
                   out[k] = temp
                 elif isinstance(out[k], list) or isinstance(v, list):
                   print "Type mismatch, list vs not in %s" % k
                   continue
                 else: 
                   out[k] = v
                else:
                   out[k] = v
            return out
                
        
        if img.has_key('Inherit'):
            for x in img["Inherit"]:
                if not image_meta.has_key(x):
                    print "WARNING: Unable to find inherit section '%s' ignoring." % x
                    continue
                conf = merge_dictionaries(conf, image_meta[x])    
        conf = merge_dictionaries(conf, img)
        
        postscript = ""
        if conf.has_key('PostScripts'):
         for scr in conf['PostScripts']:
            if os.path.exists(scr):
                f = open(scr, 'r')
                postscript += f.read()
                postscript += "\n"
                f.close()
            else:
                print 'WARNING: %s not found, skipping.' %scr

        nochrootscript = ""
        if conf.has_key('NoChrootScripts'): 
         for scr in conf['NoChrootScripts']:
            if os.path.exists(scr):
                f = open(scr, 'r')
                nochrootscript += f.read()
                nochrootscript += "\n"
                f.close()
            else:
                print 'WARNING: %s not found, skipping.' %scr

        if conf.has_key("Part"):
            partfn = conf['Part']
            if os.path.exists( partfn ):
                f = open( partfn )
                conf['Part'] = f.read()
                f.close()
            else:
                print "WARNING: %s not found" % partfn
                del conf['Part']

        conf['Post'] = postscript
        conf['NoChroot'] = nochrootscript
        return conf

    def process_files(self,  meta,  repos):
        new_repos = []

        if not meta.has_key('FileName') or not meta['FileName']:
            print "WARNING: Filename field missing. Ignoring config called '%s'." % meta['Name']
            return

        if meta.has_key("Architecture") and meta['Architecture']:
            for repo in repos:
                r = {}
                r['Name'] = repo['Name']
                if repo.has_key('Options'):
                    r['Options'] = repo['Options']
                
                # Prefer RepositoryArchitecture if present, otherwise use Architecture
                repo_arch = meta['Architecture']
                if meta.has_key('RepositoryArchitecture') and meta['RepositoryArchitecture']:
                    repo_arch = meta['RepositoryArchitecture']                                            
                r['Url'] = repo['Url'].replace("@ARCH@", repo_arch)
                
                if meta.has_key("Baseline"):
                    r['Url'] = r['Url'].replace("@RELEASE@", meta['Baseline'])
                new_repos.append(r)
        else:
            new_repos = repos

        # Check that all repos are actually found from repos data set
        if meta.has_key("Repos"):
            for selected_repo in meta['Repos']:
                found = False
                for repo in repos:
                    if repo['Name'] == selected_repo:
                        found = True
                        break
                if not found:
                    print "WARNING: Repository with name '%s' is not found, ignoring the repo for file '%s.ks'." % (selected_repo, meta['FileName'])

        nameSpace = {'metadata': meta,  'repos': new_repos}
        t = kickstart(searchList=[nameSpace])
        a = str(t)
        
        f = None
        tmp_outdir = self.outdir
        if meta.has_key("Baseline"):
            tmp_outdir = "%s/%s" % (self.outdir,meta['Baseline'])
        
        if not os.path.exists(tmp_outdir):
            mkdir_p(tmp_outdir)
        
        ksFile = "%s/%s.ks" % ( tmp_outdir, meta['FileName'] )
        f = open(ksFile, 'w')
        print "Creating %s (%s)" %(conf['Name'], ksFile )
        f.write(a)
        f.close()

def image_xml(root, img):
    s = etree.Element("config")
    c = etree.Element('name')
    c.text = "%s.ks" %img['FileName']
    s.append(c)
    cc = etree.Element('path')
    cc.text = "image-configs/%s.ks" %img['FileName']
    s.append(cc)
    cc = etree.Element('description')
    cc.text = "%s" %img['Name']
    s.append(cc)

    if img.has_key('Architecture'):
        cc = etree.Element('arch')
        cc.text = "%s" %img['Architecture']
        s.append(cc)

    cc = etree.Element('md5')
    cc.text = ""
    s.append(cc)

    cc = etree.Element('schedule')
    if img.has_key('Schedule'):
        cc.text = img['Schedule']
    s.append(cc)
    root.append(s)

if __name__ == '__main__':
    parser = optparse.OptionParser()

    parser.add_option("-c", "--configs", type="string", dest="configsfile",
                    help="configuration meta file")
    parser.add_option("-o", "--outdir", type="string", dest="outdir",
                    help="outdir", default=".")
    (options, args) = parser.parse_args()

    if options.configsfile is None:
        print "you need to provide meta file with --configs"
        sys.exit(1)

    outdir = ""
    if options.outdir is None:
        outdir = "."
    else:
        outdir = options.outdir
    
    def recursive_yaml_load(stream):
        inp = yaml.load(stream)
        out = {}
        if inp.has_key('ExternalConfigs'):
         for path in inp['ExternalConfigs']:
            for f in os.listdir(path):
                if f.endswith('.yaml'):
                    fp = file('%s/%s' % (path, f), 'r')
                    ext = recursive_yaml_load(fp)
                    for k,v in ext.iteritems():
                        if inp.has_key(k) and isinstance(v, list) and not isinstance(inp[k], list):
                            print "Different type (list vs not list) of values: %s in %s/%s" % (k, path, f)
                            break  
                        elif inp.has_key(k) and not isinstance(v, list) and isinstance(inp[k], list):
                            print "Different type (list vs not list) of values: %s in %s/%s" % (k, path, f)
                            break  
                        elif inp.has_key(k) and not isinstance(v, list):
                            print "Collision of values: %s in %s/%s" % (k, path, f)
                            break
                        elif inp.has_key(k) and isinstance(v, list):
                            # External configs come first
                            v.extend(inp[k])
                            out[k] = v
                        else:
                            out[k] = v
                    for k,v in inp.iteritems():
                        # we already merged if it's already there
                        if not out.has_key(k):
                            out[k] = v
                    inp = out
                    out = {}
                            
        return inp

    ks = KSWriter(outdir)
    image_meta = recursive_yaml_load(file(options.configsfile, 'r'))

    r = image_meta['Repositories']
    if image_meta.has_key('Configurations'):
        for img in image_meta['Configurations']:
            conf = ks.parse(image_meta, img)
            if conf.has_key('Active') and conf['Active']:
                ks.process_files(conf, r)
            else:
                print "%s is inactive, not generate %s this time" %(img['Name'], img['FileName'] )

