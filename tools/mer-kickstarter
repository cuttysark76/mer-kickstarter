#!/usr/bin/python
# Anas Nashif <anas.nashif@intel.com>
import yaml, sys
import re, os
from kickstart import kickstart

import copy
import time
import optparse
from time import gmtime, strftime
import errno
try:
  from lxml import etree
except ImportError:
  try:
    # Python 2.5
    import xml.etree.cElementTree as etree
  except ImportError:
    try:
      # Python 2.5
      import xml.etree.ElementTree as etree
    except ImportError:
      try:
        # normal cElementTree install
        import cElementTree as etree
      except ImportError:
        try:
          # normal ElementTree install
          import elementtree.ElementTree as etree
        except ImportError:
          print("Failed to import ElementTree from any known place")

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST:
            pass
        else: raise


class KSWriter():
    def __init__(self, out):
        self.outdir = out
        self.extra = {}
        pass
    def merge(*input):
        return list(reduce(set.union, input, set()))

    def parse(self, image_meta, img):
        conf = {}
        conf["RemovePackages"] = []
        conf["ExtraPackages"] = []
        # No longer "Default"
        # Updating conf with values from Inherited sections.
        
        def merge_dictionaries(first, second):
            out = copy.copy(first)
            for k,v in second.iteritems():
                if out.has_key(k):
                   if isinstance(out[k], list) and isinstance(v, list):
                       temp = copy.copy(v)
                       temp.extend(out[k])
                       out[k] = temp
                   elif isinstance(out[k], list) or isinstance(v, list):
                       sys.exit("Error: Type mismatch. Can not combine list with non-list for field '%s'" % k)
                   else:
                       out[k] = v
                else:
                   out[k] = v
            return out
        
        def read_config_file(image_meta,config_file):
            output = ''
            path = None
            if os.path.exists(config_file):
                path = config_file
            elif image_meta.has_key('ExternalConfigs'):
                for extconfdir in image_meta['ExternalConfigs']:
                    if os.path.exists('%s/%s' % (extconfdir,config_file)):
                        path = '%s/%s' % (extconfdir,config_file)
                        break
            if path:
                f = open(path, 'r')
                output += f.read()
                output += "\n"
                f.close()
            else:
                print 'WARNING: %s not found, skipping.' % config_file
            return output
        
        if img.has_key('Inherit'):
            for x in img["Inherit"]:
                if not image_meta.has_key(x):
                    print "WARNING: Unable to find inherit section '%s' ignoring." % x
                    continue
                conf = merge_dictionaries(conf, image_meta[x])    
        conf = merge_dictionaries(conf, img)
        
        postscript = ""
        if conf.has_key('PostScripts'):
            for scr in conf['PostScripts']:
                postscript += read_config_file(image_meta,scr)

        nochrootscript = ""
        if conf.has_key('NoChrootScripts'): 
            for scr in conf['NoChrootScripts']:
                nochrootscript += read_config_file(image_meta,scr)

        if conf.has_key("Part"):
            part_output = read_config_file(image_meta,conf['Part'])
            if part_output != '':
               conf['Part'] = part_output
            else:
                print "WARNING: %s not found" % partfn
                del conf['Part']

        conf['Post'] = postscript
        conf['NoChroot'] = nochrootscript
        return conf

    def process_files(self, meta, repos, global_repo_url_vars):
        new_repos = []

        if not meta.has_key('FileName') or not meta['FileName']:
            print "WARNING: FileName field missing. Ignoring config called '%s'." % meta['Name']
            return
        
        # Substitue repository values that are found.
        for repo in repos:
            r = {}
            r['Name'] = repo['Name']
            r['Url'] = repo['Url']
            if repo.has_key('Options'):
                r['Options'] = repo['Options']

            if meta.has_key("Architecture") and meta['Architecture']:
                # Prefer RepositoryArchitecture if present, otherwise use Architecture
                repo_arch = meta['Architecture']
                if meta.has_key('RepositoryArchitecture') and meta['RepositoryArchitecture']:
                    repo_arch = meta['RepositoryArchitecture']
                r['Url'] = r['Url'].replace("@ARCH@", repo_arch)
            if meta.has_key("RepositoryURLVariables") and meta['RepositoryURLVariables']:
		for variable in meta['RepositoryURLVariables']:
                    try:
                        (key,value) = variable.split(';')
                        r['Url'] = r['Url'].replace("%s" % (key), value) 
                    except ValueError:
                        print "WARNING: Ignoring invalid RepositoryURLVariables line: '%s'." % (variable)
            if global_repo_url_vars:
                for variable in global_repo_url_vars:
                    try:
                        (key,value) = variable.split(';')
                        r['Url'] = r['Url'].replace("%s" % (key), value)
                    except ValueError:
                        print "WARNING: Ignoring invalid global RepositoryURLVariables line: '%s'." % (variable)

            new_repos.append(r)

        # Check that all repos are actually found from repos data set
        if meta.has_key("Repos"):
            for selected_repo in meta['Repos']:
                found = False
                for repo in repos:
                    if repo['Name'] == selected_repo:
                        found = True
                        break
                if not found:
                    print "WARNING: Repository with name '%s' is not found, ignoring the repo for file '%s.ks'." % (selected_repo, meta['FileName'])

        nameSpace = {'metadata': meta,  'repos': new_repos}
        t = kickstart(searchList=[nameSpace])
        a = str(t)
        
        f = None
        
        if not os.path.exists(self.outdir):
            mkdir_p(self.outdir)
        
        ksFile = "%s/%s.ks" % ( self.outdir, meta['FileName'] )
        f = open(ksFile, 'w')
        print "Creating %s (%s)" %(conf['Name'], ksFile )
        f.write(a)
        f.close()

if __name__ == '__main__':
    parser = optparse.OptionParser()

    parser.add_option("-c", "--configs", type="string", dest="configsfile",
                    help="configuration meta file")
    parser.add_option("-o", "--outdir", type="string", dest="outdir",
                    help="outdir", default=".")
    (options, args) = parser.parse_args()

    if options.configsfile is None:
        print "you need to provide meta file with --configs"
        sys.exit(1)

    outdir = ""
    if options.outdir is None:
        outdir = "."
    else:
        outdir = options.outdir
    
    def recursive_yaml_load(stream,read_yaml_files):
        inp = yaml.load(stream)
        out = {}
        if not inp.has_key('ExternalConfigs') or not inp['ExternalConfigs']:
            return inp

        for path in inp['ExternalConfigs']:
            if not os.path.exists(path):
                print "WARNING: path '%s' doesn't exist ignoring." % (path)
                continue
            for f in os.listdir(path):
                if f.endswith('.yaml'):
                    filename = '%s/%s' % (path, f)

                    # Prevent infinite recusion loops
                    if filename in read_yaml_files:
                        print "WARNING: File '%s' already read, ignoring the file." % (filename)
                        continue
                    read_yaml_files.append(filename)

                    fp = file(filename, 'r')
                    ext = recursive_yaml_load(fp, read_yaml_files)
                    for k,v in ext.iteritems():
                        if inp.has_key(k) and isinstance(v, list) and not isinstance(inp[k], list):
                            print "Different type (list vs not list) of values: %s in %s/%s" % (k, path, f)
                            break  
                        elif inp.has_key(k) and not isinstance(v, list) and isinstance(inp[k], list):
                            print "Different type (list vs not list) of values: %s in %s/%s" % (k, path, f)
                            break  
                        elif inp.has_key(k) and not isinstance(v, list):
                            print "Collision of values: %s in %s/%s" % (k, path, f)
                            break
                        elif inp.has_key(k) and isinstance(v, list):
                            # External configs come first
                            v.extend(inp[k])
                            out[k] = v
                        else:
                            out[k] = v
                    for k,v in inp.iteritems():
                        # we already merged if it's already there
                        if not out.has_key(k):
                            out[k] = v
                    inp = out
                    out = {}
                            
        return inp

    ks = KSWriter(outdir)
    read_yaml_files = [ options.configsfile ]
    image_meta = recursive_yaml_load(file(options.configsfile, 'r'),read_yaml_files)

    repositories = None
    global_repo_url_vars = None
    if image_meta.has_key('Repositories') and image_meta['Repositories']:
        repositories = image_meta['Repositories']

    if image_meta.has_key('RepositoryURLVariables') and image_meta['RepositoryURLVariables']:
        global_repo_url_vars = image_meta['RepositoryURLVariables']

    if image_meta.has_key('Configurations') and image_meta['Configurations']:
        for img in image_meta['Configurations']:
            conf = ks.parse(image_meta, img)
            if conf.has_key('Active') and conf['Active']:
                ks.process_files(conf, repositories, global_repo_url_vars)
            else:
                filename = None
                if img.has_key('Filename') and img['Filename']:
                   filename = img['Filename']
                print "%s is inactive, not generating file '%s' this time." %(img['Name'], filename)
    else:
        print "WARNING: No 'Configurations' found from yaml."

